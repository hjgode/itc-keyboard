#summary An extended ITC keyboard remapper API (compact framework) class

= Introduction =

ITC provides you the keyboard remap API within the device resource kit. This API is good to remap keys to produce
simply other key messages. But as soon as you need to remap a key to produce special keys, you need to fiddle
with the registry. For example you can not use the remap API to produce a sequence of keys or toggle key modifiers like CAPS lock or CTRL.
This is the time where you may need this keyboard remapper class.

= Background =

The Intermec keyboards (newer devices) use binary registry keys for keyboard mapping. The itc-keyboard classes try to give you easy access to those keys and let you go beyond the intermec device resource kit keyboard remapper.

The binary mapping registry keys are sequences of 6 or 4 bytes. In a six byte sequence, the first two bytes define the USB hardware key the mapping is associated with. These USB HID keynames reflect the normal printed hardware key of an intermec device. Unfortunately not all printed key names are available in the normal USB HID Keyboard name table and so the one or other keyname does not reflect the printed key. 

For example, the orange and aqua buttons names are not part of the USB HID keyboard key names.

The 4 byte sequences are used inside Multikey tables in registry. Multikeys are defined by 4 byte sequences which define the keys emulated by pressing a key that is mapped to the multikey entry.

The byte sequence definitions for keys can use either PS/2 key tables or the have the VKEY value.

Other key mappings can point to multikeys, modifiers, shiftkeys and other tables.

= Details =

For some more information see 
[http://www.hjgode.de/wp/2010/11/06/itckeyboard-a-class-to-manage-itc-keyboard-mappings/ itc-keyboard at my blog]

The classes and the code are documented inline. There is also a Doxygen generated help inside the svn doc directory.